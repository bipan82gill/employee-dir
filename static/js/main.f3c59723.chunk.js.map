{"version":3,"sources":["components/EmployeeCard/index.js","components/Row/index.js","components/EmployeeHeader/index.js","components/Container/index.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeCard","props","className","alt","name","src","image","id","salary","age","onClick","removeEmployee","Row","fluid","EmployeeHeader","Container","App","state","employees","filter","employee","setState","this","map","key","employee_name","profile_image","employee_age","employee_salary","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"m5DAkCeA,MA/Bf,SAAsBC,GACpB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,QAEnC,yBAAKJ,UAAU,WACb,4BACA,4BACI,uCADJ,IAC0BD,EAAMM,IAE9B,4BACE,yCADF,IAC0BN,EAAMG,MAEhC,4BACE,2CADF,IAC4BH,EAAMO,QAElC,4BACE,wCADF,IACyBP,EAAMQ,QAMnC,0BAAMC,QAAS,kBAAMT,EAAMU,eAAeV,EAAMM,KAAKL,UAAU,UAA/D,kBCrBSU,MAJf,SAAaX,GACX,OAAO,uCAAKC,UAAS,aAAQD,EAAMY,MAAQ,SAAW,KAAUZ,K,MCQnDa,MARf,SAAwBb,GACxB,OACI,yBAAKC,UAAW,gBACZ,gD,OCAOa,MAJf,SAAmBd,GACjB,OAAO,uCAAKC,UAAS,mBAAcD,EAAMY,MAAQ,SAAW,KAAUZ,KC4CzDe,E,4MApCbC,MAAQ,CACNC,a,EAGFP,eAAiB,SAAAJ,GAEf,IAAMW,EAAW,EAAKD,MAAMC,UAAUC,QAAO,SAAAC,GAAQ,OAAIA,EAASb,KAAOA,KAEzE,EAAKc,SAAS,CAAEH,e,uDAIR,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,wBACA,kBAAC,EAAD,CAAKhB,UAAU,QAEdoB,KAAKL,MAAMC,UAAUK,KAAI,SAAAH,GAAQ,OAChC,kBAAC,EAAD,CACET,eAAgB,EAAKA,eACrBJ,GAAIa,EAASb,GACbiB,IAAKJ,EAASb,GACdH,KAAMgB,EAASK,cACfnB,MAAOc,EAASM,cAChBjB,IAAKW,EAASO,aACdnB,OAAQY,EAASQ,0B,GA5BXC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f3c59723.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction EmployeeCard(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image} />\r\n      \r\n      <div className=\"content\">\r\n        <ul>\r\n        <li>\r\n            <strong>Id:</strong> {props.id}\r\n          </li>\r\n          <li>\r\n            <strong>Name:</strong> {props.name}\r\n          </li>\r\n          <li>\r\n            <strong>Salary:</strong> {props.salary}\r\n          </li>\r\n          <li>\r\n            <strong>Age:</strong> {props.age}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      \r\n      </div>\r\n      <span onClick={() => props.removeEmployee(props.id)} className=\"remove\">\r\n        ùòÖ\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmployeeCard;\r\n","import React from \"react\";\r\n\r\nfunction Row(props) {\r\n  return <div className={`row${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\r\n}\r\n\r\nexport default Row;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction EmployeeHeader(props){\r\nreturn(\r\n    <div className =\"employeeList\">\r\n        <h1>Employees List</h1>\r\n    </div>\r\n);\r\n}\r\n\r\nexport default EmployeeHeader;","import React from \"react\";\r\n\r\nfunction Container(props) {\r\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\r\n}\r\n\r\nexport default Container;","import React, { Component } from \"react\";\r\nimport EmployeeCard from \"./components/EmployeeCard\";\r\nimport Row from './components/Row';\r\nimport EmployeeHeader from \"./components/EmployeeHeader\";\r\nimport employees from \"./employees.json\";\r\nimport Container from './components/Container';\r\n\r\n\r\n\r\nclass App extends Component {\r\n  // Setting this.state.employees to the employees json array\r\n  state = {\r\n    employees\r\n  };\r\n\r\n  removeEmployee = id => {\r\n    // Filter this.state.employees for employees with an id not equal to the id being removed\r\n    const employees= this.state.employees.filter(employee => employee.id !== id);\r\n    // Set this.state.employees equal to the new employees array\r\n    this.setState({ employees});\r\n  };\r\n\r\n  // Map over this.state.employees and render a EmployeeCard component for each employee object\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <EmployeeHeader> Employees List</EmployeeHeader>\r\n        <Row className=\"row\"/>\r\n        \r\n        {this.state.employees.map(employee => (\r\n          <EmployeeCard\r\n            removeEmployee={this.removeEmployee}\r\n            id={employee.id}\r\n            key={employee.id}\r\n            name={employee.employee_name}\r\n            image={employee.profile_image}\r\n            age={employee.employee_age}\r\n            salary={employee.employee_salary}\r\n          />\r\n        ))}\r\n      \r\n       \r\n     </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}